@page "/projects"

@using Blazorise.Components
@using Crm.Blazor.Components.Dialogs.Projects
@using Crm.Projects

@inject NavigationManager Navigation

<Div Margin="Margin.IsAuto.OnX">
    <Card>
        <CardHeader Flex="Flex.JustifyContent.Between.AlignItems.Center">
            <Div>
                <Field Display="Display.InlineFlex" Margin="Margin.Is0.FromBottom">                    

                    <Autocomplete TItem="ProjectDto"
                    TValue="string"
                    Data="@Projects"
                    TextField="@((item) => item.Name)"                                  
                    @bind-SelectedText="@selectedProjectName"
                    Placeholder="Search projects..."
                    Filter="AutocompleteFilter.StartsWith"
                    FreeTyping
                    CustomFilter="@(( item, searchValue ) => item.Name.IndexOf( searchValue, 0, StringComparison.CurrentCultureIgnoreCase ) >= 0 )">
                        <NotFoundContent> Sorry, no project found for "@context". </NotFoundContent>
                    </Autocomplete>
                </Field>
                @*Daha sonra kaldıracam burayı*@
               @*  <p><Strong>Selected Project Name:</Strong> @selectedProjectName</p> *@

            </Div>
            <Div Flex="Flex.JustifyContent.Between.AlignItems.Center" Gap="Gap.Is3">
                <Field Display="Display.InlineFlex" Margin="Margin.Is0.FromBottom">
                    <DatePicker TValue="DateTime?" Placeholder="Pick date range" InputMode="DateInputMode.Date" SelectionMode="DateInputSelectionMode.Range" />
                </Field>
                <Field Display="Display.InlineFlex" Margin="Margin.Is0.FromBottom">
                    <Select TValue="string">
                        <SelectItem>All</SelectItem>
                        <SelectItem>Cancelled</SelectItem>
                        <SelectItem>Completed</SelectItem>                        
                    </Select>
                </Field>
                <Field Display="Display.InlineFlex" Margin="Margin.Is0.FromBottom">
                    <Button Color="Color.Primary" Clicked="@ShowCreateModal">Add Project</Button>
                </Field>
            </Div>
        </CardHeader>
    </Card>
</Div> 

<Row>
    @foreach (var project in Projects)
    {
        <Column ColumnSize="ColumnSize.Is4.OnWidescreen.Is8.OnDesktop.Is10.OnTablet">
            <Card>
                <CardBody>
                    <CardTitle Size="5">
                        <Div Flex="Flex.JustifyContent.Between">
                            <Span>@project.Name</Span>
                            <Span class="status-label">@project.Status</Span>
                        </Div>
                    </CardTitle>
                    <Paragraph Margin="Margin.Is3.FromTop">
                        @project.Description
                    </Paragraph>
                    <Div Flex="Flex.AlignItems.Center">
                        <Text>
                            <Small>@project.StartTime.ToShortDateString()</Small>
                        </Text>

                        <Div class="progress-container">
                            <Div class="progress-bar" style="@($"width: {GetCompletionPercentage(project.StartTime, project.EndTime)}%")">
                                @GetCompletionPercentage(project.StartTime, project.EndTime)%
                            </Div>
                        </Div>

                        <Text>
                            <Small>@project.EndTime.ToShortDateString()</Small>
                        </Text>
                    </Div>

                    <br />
                    <Anchor To="#" @onclick="() => NavigateToProjectDetail(project.Id)">
                        Read More
                    </Anchor>
                </CardBody>
            </Card>
        </Column>
    }
</Row>


@* ********** CREATE MODAL ********** *@
<ProjectCreateModal @ref="projectCreateModal" />

@code {
    private void NavigateToProjectDetail(Guid projectId)
    {
        Navigation.NavigateTo($"/project-detail/{projectId}");
    }

    private int GetCompletionPercentage(DateTime? start, DateTime? end)
    {
        if (start == null || end == null || start >= end)
        {
            return 0;
        }

        var totalDuration = (end.Value - start.Value).TotalDays;
        var elapsedDuration = (DateTime.Now - start.Value).TotalDays;

        var percentage = (elapsedDuration / totalDuration) * 100;
        return Math.Clamp((int)percentage, 0, 100);
    }

    //Select Project
    [Inject]
    public IProjectAppService ProjectAppService { get; set; }
    public IEnumerable<ProjectDto> Projects { get; set; }
    public string selectedProjectName { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Projects = await ProjectAppService.GetListAllAsync();
        await base.OnInitializedAsync();
    }
    
    //Date Range
    DateTime? value;

    //Create Modal
    private ProjectCreateModal projectCreateModal;

    private async Task ShowCreateModal()
    {
        if (projectCreateModal != null)
        {
            await projectCreateModal.ShowModal();
        }
    }
}

<style>
    .progress-container {
        width: 100px;
        height: 10px;
        background-color: #ddd;
        border-radius: 5px;
        overflow: hidden;
        margin: 0 10px;
    }

    .progress-bar {
        height: 100%;
        background-color: #4caf50;
        text-align: center;
        font-size: 10px;
        color: white;
        line-height: 10px;
    }

</style>