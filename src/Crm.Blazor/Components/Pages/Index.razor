@page "/"
@attribute [Authorize]
@using Volo.Abp.MultiTenancy
@using Crm.Projects
@using Crm.Tasks
@using Crm.Customers
@using Crm.Common
@using Crm.Employees

@inherits CrmComponentBase

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProjectAppService ProjectAppService
@inject ITaskAppService TasksAppService
@inject ICustomerAppService CustomersAppService
@inject IEmployeeAppService EmployeeAppService

<Div class="card-container">
    <Card class="left-card">
    <CardBody>
        <Div class="project-overview">
            <Div class="overview-item">
                <Blazorise.Icons.FontAwesome.Icon Name="IconName.CheckSquare" Class="icon" />
                <Div>
                    <Div class="top-label">@L["Total Projects"]</Div>
                    <Div class="field-label">@totalProjects</Div>
                </Div>
            </Div>
            <Div class="overview-item">
                <Blazorise.Icons.FontAwesome.Icon Name="IconName.Check" Class="icon" />
                <Div>
                    <Div class="top-label">@L["Total Tasks"]</Div>
                    <Div class="field-label">@totalTasks</Div>
                </Div>
            </Div>
            <Div class="overview-item">
                <Blazorise.Icons.FontAwesome.Icon Name="IconName.Users" Class="icon" />
                <Div>
                    <Div class="top-label">@L["Total Customer"]</Div>
                    <Div class="field-label">@totalCustomer</Div>
                </Div>
            </Div>
        </Div>
    </CardBody>
</Card>

    <Card class="right-card">
    <CardBody>
            <Span class="welcome-mesaage">
                @L["WelcomeMessage", GetCurrentUserName()]
            </Span>
    </CardBody>
</Card>
</Div>

<Card class="mt-4">
    <CardBody>
        <Div class="progress-info">
            <Div class="top-label">@L["Project Success Rate"]</Div>
            <Progress Class="my-2" Max="100" Value="@(Convert.ToInt32(totalSuccessRate))" Color="Color.Success" />
            <Div class="field-label">@($"{totalSuccessRate}%")</Div>
        </Div>
    </CardBody>
</Card>

<div class="row">
    <div class="col-md-6">
        <Card class="mt-4">
            <CardBody>
                <Div class="overview-item">
                    <Blazorise.Icons.FontAwesome.Icon Name="IconName.UserPlus" Class="icon" />
                    <Div>
                        <Div class="top-label">@L["This Month's New Customers"]</Div>
                        <Div class="field-label">@newCustomersThisMonth</Div>
                    </Div>
                </Div>
            </CardBody>
        </Card>
    </div>

    <div class="col-md-6">
        <Card class="mt-4">
            <CardBody>
                <Div class="overview-item">
                    <Blazorise.Icons.FontAwesome.Icon Name="IconName.Star" Class="icon" />
                    <Div>
                        <Div class="top-label">@L["Active Tasks"]</Div>
                        <Div class="field-label">@activeTasks</Div>
                    </Div>
                </Div>
            </CardBody>
        </Card>
    </div>
</div>

@code {
    
    private long totalProjects;
    private long totalTasks;
    private long totalCustomer;
    private decimal totalSuccessRate;  
    private decimal? successRate = null;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        totalProjects = await ProjectAppService.GetTotalProjectCountAsync();
        totalTasks = await TasksAppService.GetTotalTaskCountAsync();
        totalCustomer = await CustomersAppService.GetTotalCustomerCountAsync();
        totalSuccessRate = await ProjectAppService.GetSuccessRateAverageAsync(successRate); 
        
        var allCustomers = await CustomersAppService.GetListAllAsync();
        var now = DateTime.Now;

        newCustomersThisMonth = allCustomers
            .Count(c => c.CreationTime.Month == now.Month && c.CreationTime.Year == now.Year);

        var allTasks = await TasksAppService.GetListAllAsync(); 
        activeTasks = allTasks.Count(t => t.Status == EnumStatus.Active); 

    }

    private int newCustomersThisMonth;  
    private int activeTasks;

    private string GetCurrentUserName()
    {
        var authState = AuthenticationStateProvider.GetAuthenticationStateAsync().Result;
        return authState.User.Identity?.Name ?? "Guest";
    }
}


<style>
    .project-overview {
        display: flex;
        justify-content: space-between;
        background: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        margin-top: 20px;
    }

    .card-container {
        display: flex;
        gap: 20px;
        margin-top: 20px;
    }

    .left-card, .right-card {
        flex: 1;
    }
    .overview-item {
        display: flex;
        align-items: center;
        gap: 10px;
    }

        .overview-item .icon {
            font-size: 24px;
            color: #6c757d;
        }

    .top-label {
        font-size: 14px;
        color: #6c757d;
        margin-bottom: 5px;
    }

    .field-label {
        font-size: 18px;
        color: #000;
        font-weight: 500;
    }

    .welcome-mesaage {
        font-size: 16px;
        font: bold;
        color: black;
    }
</style>
